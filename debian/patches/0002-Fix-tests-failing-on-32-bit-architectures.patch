From: Reinhard Tartler <siretart@tauware.de>
Date: Tue, 13 Aug 2024 06:34:53 -0400
Subject: Fix tests failing on 32 bit architectures

Bugs-Upstream: https://github.com/urfave/cli/issues/1962
Forwarded: https://github.com/urfave/cli/pull/1963
---
 altsrc/yaml_file_loader_test.go | 25 ++++++++++++-------------
 flag_test.go                    | 10 +++++-----
 2 files changed, 17 insertions(+), 18 deletions(-)

diff --git a/altsrc/yaml_file_loader_test.go b/altsrc/yaml_file_loader_test.go
index ce69189..d8a1db9 100644
--- a/altsrc/yaml_file_loader_test.go
+++ b/altsrc/yaml_file_loader_test.go
@@ -3,7 +3,6 @@ package altsrc_test
 import (
 	"errors"
 	"fmt"
-	"io/ioutil"
 	"log"
 	"os"
 	"testing"
@@ -90,7 +89,7 @@ func ExampleApp_Run_yamlFileLoaderDuration() {
 }
 
 func TestYamlFileInt64Slice(t *testing.T) {
-	_ = ioutil.WriteFile("current.yaml", []byte(`top: 
+	_ = os.WriteFile("current.yaml", []byte(`top:
   test: [100, 9223372036854775808]`), 0666)
 	defer os.Remove("current.yaml")
 
@@ -110,7 +109,7 @@ func TestYamlFileInt64Slice(t *testing.T) {
 }
 
 func TestYamlFileStringSlice(t *testing.T) {
-	_ = ioutil.WriteFile("current.yaml", []byte(`top:
+	_ = os.WriteFile("current.yaml", []byte(`top:
   test: ["s1", "s2"]`), 0666)
 	defer os.Remove("current.yaml")
 
@@ -143,7 +142,7 @@ func TestYamlFileUint64(t *testing.T) {
 	}{
 		{
 			"top.test",
-			`top: 
+			`top:
   test: 100`,
 			false,
 		},
@@ -169,7 +168,7 @@ func TestYamlFileUint64(t *testing.T) {
 		},
 		{
 			"test",
-			"test: 9223372036854775808", //uintt64
+			"test: 9223372036854775808", //uint64
 			false,
 		},
 		{
@@ -180,7 +179,7 @@ func TestYamlFileUint64(t *testing.T) {
 	}
 
 	for i, test := range tests {
-		_ = ioutil.WriteFile("current.yaml", []byte(test.entry), 0666)
+		_ = os.WriteFile("current.yaml", []byte(test.entry), 0666)
 		defer os.Remove("current.yaml")
 
 		testFlag := []cli.Flag{
@@ -207,7 +206,7 @@ func TestYamlFileUint(t *testing.T) {
 	}{
 		{
 			"top.test",
-			`top: 
+			`top:
   test: 100`,
 			false,
 		},
@@ -228,12 +227,12 @@ func TestYamlFileUint(t *testing.T) {
 		},
 		{
 			"test",
-			"test: 9223372036854775807", //int
+			"test: 775807", //int
 			false,
 		},
 		{
 			"test",
-			"test: 9223372036854775808", //uintt64
+			"test: 4775808", //uint64
 			false,
 		},
 		{
@@ -244,7 +243,7 @@ func TestYamlFileUint(t *testing.T) {
 	}
 
 	for i, test := range tests {
-		_ = ioutil.WriteFile("current.yaml", []byte(test.entry), 0666)
+		_ = os.WriteFile("current.yaml", []byte(test.entry), 0666)
 		defer os.Remove("current.yaml")
 
 		testFlag := []cli.Flag{
@@ -271,7 +270,7 @@ func TestYamlFileInt64(t *testing.T) {
 	}{
 		{
 			"top.test",
-			`top: 
+			`top:
   test: 100`,
 			false,
 		},
@@ -297,7 +296,7 @@ func TestYamlFileInt64(t *testing.T) {
 		},
 		{
 			"test",
-			"test: 9223372036854775808", //uintt64
+			"test: 9223372036854775808", //uint64
 			true,
 		},
 		{
@@ -308,7 +307,7 @@ func TestYamlFileInt64(t *testing.T) {
 	}
 
 	for i, test := range tests {
-		_ = ioutil.WriteFile("current.yaml", []byte(test.entry), 0666)
+		_ = os.WriteFile("current.yaml", []byte(test.entry), 0666)
 		defer os.Remove("current.yaml")
 
 		testFlag := []cli.Flag{
diff --git a/flag_test.go b/flag_test.go
index 2e01766..64d9303 100644
--- a/flag_test.go
+++ b/flag_test.go
@@ -196,7 +196,7 @@ func TestFlagsFromEnv(t *testing.T) {
 		{"1", 1, &IntFlag{Name: "seconds", EnvVars: []string{"SECONDS"}}, ""},
 		{"08", 8, &IntFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 10}, ""},
 		{"755", 493, &IntFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 8}, ""},
-		{"deadBEEF", 3735928559, &IntFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 16}, ""},
+		{"dBEEF", 900847, &IntFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 16}, ""},
 		{"08", 0, &IntFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 0}, `could not parse "08" as int value from environment variable "SECONDS" for flag seconds: .*`},
 		{"1.2", 0, &IntFlag{Name: "seconds", EnvVars: []string{"SECONDS"}}, `could not parse "1.2" as int value from environment variable "SECONDS" for flag seconds: .*`},
 		{"foobar", 0, &IntFlag{Name: "seconds", EnvVars: []string{"SECONDS"}}, `could not parse "foobar" as int value from environment variable "SECONDS" for flag seconds: .*`},
@@ -230,7 +230,7 @@ func TestFlagsFromEnv(t *testing.T) {
 		{"1", uint(1), &UintFlag{Name: "seconds", EnvVars: []string{"SECONDS"}}, ""},
 		{"08", uint(8), &UintFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 10}, ""},
 		{"755", uint(493), &UintFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 8}, ""},
-		{"deadBEEF", uint(3735928559), &UintFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 16}, ""},
+		{"dBEEF", uint(900847), &UintFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 16}, ""},
 		{"08", 0, &UintFlag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 0}, `could not parse "08" as uint value from environment variable "SECONDS" for flag seconds: .*`},
 		{"1.2", 0, &UintFlag{Name: "seconds", EnvVars: []string{"SECONDS"}}, `could not parse "1.2" as uint value from environment variable "SECONDS" for flag seconds: .*`},
 		{"foobar", 0, &UintFlag{Name: "seconds", EnvVars: []string{"SECONDS"}}, `could not parse "foobar" as uint value from environment variable "SECONDS" for flag seconds: .*`},
@@ -238,7 +238,7 @@ func TestFlagsFromEnv(t *testing.T) {
 		{"1", uint64(1), &Uint64Flag{Name: "seconds", EnvVars: []string{"SECONDS"}}, ""},
 		{"08", uint64(8), &Uint64Flag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 10}, ""},
 		{"755", uint64(493), &Uint64Flag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 8}, ""},
-		{"deadBEEF", uint64(3735928559), &Uint64Flag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 16}, ""},
+		{"dBEEF", uint64(900847), &Uint64Flag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 16}, ""},
 		{"08", 0, &Uint64Flag{Name: "seconds", EnvVars: []string{"SECONDS"}, Base: 0}, `could not parse "08" as uint64 value from environment variable "SECONDS" for flag seconds: .*`},
 		{"1.2", 0, &Uint64Flag{Name: "seconds", EnvVars: []string{"SECONDS"}}, `could not parse "1.2" as uint64 value from environment variable "SECONDS" for flag seconds: .*`},
 		{"foobar", 0, &Uint64Flag{Name: "seconds", EnvVars: []string{"SECONDS"}}, `could not parse "foobar" as uint64 value from environment variable "SECONDS" for flag seconds: .*`},
@@ -1427,8 +1427,8 @@ var uintSliceFlagTests = []struct {
 }{
 	{"heads", nil, NewUintSlice(), "--heads value [ --heads value ]\t"},
 	{"H", nil, NewUintSlice(), "-H value [ -H value ]\t"},
-	{"heads", []string{"H"}, NewUintSlice(uint(2), uint(17179869184)),
-		"--heads value, -H value [ --heads value, -H value ]\t(default: 2, 17179869184)"},
+	{"heads", []string{"H"}, NewUintSlice(uint(2), uint(79869184)),
+		"--heads value, -H value [ --heads value, -H value ]\t(default: 2, 79869184)"},
 }
 
 func TestUintSliceFlagHelpOutput(t *testing.T) {
